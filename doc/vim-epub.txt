*vim-epub.txt* A plugin for EPUB edition. U_DONT'SAY?

===============================================================================
CONTENTS                                                               *vim-epub*

   1. Intro .................................................... |vepub-intro|
   2. Requirements ...................................... |vepub-requirements|

   3. Usage .................................................... |vepub-usage|
      3.1 Application the commands ............................. |vepub-field|
      3.2 Global options ..................................... |vepub-options|
      3.3 Commands .......................................... |vepub-commands|
      3.4 Extras .............................................. |vepub-extras|

   4. Licence ................................................ |vepub-licence|
   5. Remerciements ................................. |vepub-acknowledgements|

===============================================================================
1. Intro                                                            *vepub-intro*

Versions of this help file in other languages are available in the doc/ folder
of this plugin.

Available translations:
  - francais (french)

===============================================================================
2. Requirements                                              *vepub-requirements*

You need a vim copy compiled with python support. Try:

	:version

If you see +python, it's ok.

You'll also need unzip.

CleanFromExports command also needs pandoc:

	http://johnmacfarlane.net/pandoc/index.html

===============================================================================
3. Usage                                                            *vepub-usage*

vim-epub doesn't define any mapping. Map all the commands you want.

The commands that are only usable with EPUB2 files are marked with {EPU2}, the
commands that are only usable with EPUB3 files are marked with {EPUB3}.
Agnostic-EPUB-versions commands are marked with any of these markers.

-------------------------------------------------------------------------------
3.1 Application of the commands                                     *vepub-field*

Vim-EPUB use zip.vim to open and modify an EPUB's content. At the opening of
a file, the buffer of the EPUB's file contents is provided by zip.vim.

This buffer may look like this:

	zip.vim version v27
	" Browsing zipfile /home/kaboom/test.epub
	" Select a file with cursor and press ENTER

	mimetype
	OEBPS/Images/Foo.png
	OEBPS/toc.ncx
	OEBPS/content.opf
	OEBPS/Styles/Style.css
	OEBPS/Text/Text.xhtml
	META-INF/container.xml

Application of the command markers
----------------------------------

{OnEPUBContentsBuffer}     | Command only usable on "EPUB's content" buffer.
{OnEPUBContentsBufferLine} | Command only usable on a line of the "EPUB's
                           | content" buffer
{OnTextBuffer}             | Command only usable on text files' buffers
                           | (xhtml...).
{OnAnyBuffer}              | Command usable on any buffer.

-------------------------------------------------------------------------------
3.2 Global options                                                *vepub-options*

g:VimEPUB_EPUB_Version ~

EPUB versions managed by Vim-EPUB:
	- "2" (EPUB2)
	- "3" (EPUB3)
	- "2;3" (EPUB2 & EPUB3: compatibility mode) (default)

g:VimEPUB_Skels_Dir ~

Folder path of the templates used  by Vim-EPUB (ex: source of an page
inserted by AddEmptyPage).

	"none" (default, in plugin/skels/)

-------------------------------------------------------------------------------
3.3 Commands                                                     *vepub-commands*

AddEmptyPage ~

{OnAnyBuffer} 

Usage:
        :AddEmptyPage


Prompt for a new empty page name and add a new page (xhtml file) in the EPUB.


AddEmptyCSS ~

{OnAnyBuffer} 

Usage:
        :AddEmptyCSS

Prompt for a new empty css  stylesheet name and add a stylesheet page
(css file) in the EPUB.


AddMedia ~

{OnAnyBuffer} 

Usage:
        :AddMedia

Prompt for an existing media path and add it in the EPUB.
The "media" can be: images,(X)HTML,CSS,fonts...


AddTocPage ~

{OnAnyBuffer} 

Usage:
        :AddTocPage

Add a table of contents page called TableOfContents.xhtml in the EPUB.


NewEPUB ~

{OnAnyBuffer}

Usage:
	:NewEPUB

Make an  new EPUB  file and  possibly add the  files of  the currents
opened buffers.


RenameFile ~

{OnEPUBContentsBuffer} 

Usage:
	:RenameFile


Rename the  file on the  current line and fix  all the links  to this
renamed file on the others files of the EPUB.


MergeFiles ~

{OnEPUBContentsBuffer} 

Usage:
	:MergeFiles

Merge the files on the current and next lines, either in the file on the
current line or in another filepath given by the user.


RemoveUnusedMedias ~

{OnAnyBuffer} 

Usage:
	:RemoveUnusedMedias

Research all unused medias in the EPUB  file et make the user able to
remove them.


BackupEPUB ~

{OnAnyBuffer}

Usage:
	:BackupEPUB


Make a backup  file of the EPUB named x.epub.user.bak  where x is the
name given to the backup.


DiffEPUB ~

{OnAnyBuffer}

Usage:
        :DiffEPUB

Options:
        g:VimEPUB_DiffSplit
            Split style used

            "horizontal" for an horizontal split (sp) (default)
            "vertical" for a vertical split (vsp)

Prompt the user for a EPUB file path and compares the current EPUB to it.


DiffLastEPUB ~

{OnAnyBuffer}

Usage:
        :DiffLastEPUB

Options:
        g:VimEPUB_DiffSplit
            Split style used

            "horizontal" for an horizontal split (sp) (default)
            "vertical" for a vertical split (vsp)

Compares the current EPUB to the last backup made by Vim-EPUB.


LinkToCss ~

{OnTextBuffer}

Usage:
        :LinkToCss


Prompt for an existing CSS file in the EPUB's contents and add its definition
on the current line.


OpenReader ~

{OnAnyBuffer}

Usage:
        :OpenReader

Options:
	g:VimEPUB_EReaderCommand
	     Program used to open the EPUB, overriding the OS settings.

	     "none" the command don't override the OS settings.
		    (default)

Open the EPUB file in the system-defined ebook viewer.


OpenMedia ~

{OnEPUBContentsBuffer}

Usage:
	:OpenMedia

Options:
	g:VimEPUB_OpenMedia_Font
	     Programme used to open the font, overriding the OS settings.

	     "none" the command don't override the OS settings.
		    (default)

	g:VimEPUB_OpenMedia_Image
	     Programme used to open the image, overriding the OS settings.

	     "none" the command don't override the OS settings.
		    (default)

Troubleshooting:
	"With the default settings, vim-epub correctly opens TTF fonts but 
	opens OTF fonts with Libre/Open Office!"
		The OTF extension can be mistaken with the Open Document
		Template file format. Modify the open-by-default program
		affected to this extension.
	
	"After the start of the program, Vim is no more visible in my 
	terminal!"
		This is due to the program output. Scroll.

Open the  file on the  current line in a program defined by the user or by the
OS settings, with xdg-open.


UpdateToc ~

{OnAnyBuffer} 

Usage: 
 	:UpdateToc

Options:
	g:VimEPUB_EPUB_Version 
		See |vepub-options|

Create or update the EPUB's table of contents.
To add a table of contents _page_, see AddTocPage command.


FindFontDefinition ~

{OnEPUBContentsBufferLine}

Usage:
	:FindFontDefinition

Options:
	g:VimEPUB_FontDefSplit
            Split style used

            "horizontal" for an horizontal split (sp) (default)
            "vertical" for a vertical split (vsp)

Show where the font on the current line is defined.


ViewMetadatas ~

{OnAnyBuffer}

Usage:
	:ViewMetadatas

Options:
        g:VimEPUB_MetaSplit
            Split style used

            "horizontal" for an horizontal split (sp) (default)
            "vertical" for a vertical split (vsp)

Show EPUB's metadatas with an human-readable format. Or not :-).


CleanFromExports ~

{OnTextBuffer}

Usage:
	:CleanFromExports

Tidy the code of an HTML file exported by Microsoft Word and Calibre.

-------------------------------------------------------------------------------
3.4 Extras                                                         *vepub-extras*

Snippets ~

Snippets for UltiSnips are packaged with vim-epub. Copy them to your Snippets
directory for a better editing experience.

Check the vim-epub folder.

===============================================================================
4. Licence                                                        *vepub-licence*

vim-epub is released under the GNU General Public Licence version 3 (GPL v3).

===============================================================================
5. Acknowledgements                                      *vepub-acknowledgements*

To  Mikhail  Gusarov  for  path.py,  a  wrapper  around  os,  shutil,
tempfile...

    https://github.com/jaroco/path.py

To Nic West for epubdiff, a diff checker for two EPUB files.

    https://github.com/nicwest/epubdiff
    http://www.nic-west.com/

To Kumar McMillan, for his brilliant talk about Python and Unicode
- a subject that made me regularly mad.

    http://farmdev.com/talks/unicode/

To Exirel, for his python module  "epub", very usefull if you want to
make  a NCX  file  without  headeache. The  python  module "epub"  is
released under GPL/LGPL licenses.

	https://bitbucket.org/exirel/epub
	https://pypi.python.org/pypi/epub

To Drew Neil, for all the Vimcasts episodes, and particularly this one:

	http://vimcasts.org/episodes/using-external-filter-commands-to-reformat-html/

To all Pandoc contributors:

	http://johnmacfarlane.net/pandoc/index.html

	Pandoc is published under GPL license.

vim:tw=78:ts=8:ft=help:norl:spelllang=en:
